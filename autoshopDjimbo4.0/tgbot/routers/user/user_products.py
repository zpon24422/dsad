# - *- coding: utf- 8 - *-
import asyncio

from aiogram import Router, Bot, F
from aiogram.filters import StateFilter
from aiogram.types import CallbackQuery, Message

from tgbot.database.db_position import Positionx
from tgbot.database.db_purchases import Purchasesx
from tgbot.database.db_users import Userx
from tgbot.keyboards.inline_user import products_confirm_finl, products_return_finl
from tgbot.keyboards.inline_user_page import *
from tgbot.keyboards.reply_main import menu_frep
from tgbot.utils.const_functions import split_messages, get_unix, ded, del_message, convert_date, gen_id
from tgbot.utils.misc.bot_models import FSM, ARS
from tgbot.utils.misc_functions import get_positions_items
from tgbot.utils.text_functions import position_open_user

router = Router(name=__name__)


# –°—Ç—Ä–∞–Ω–∏—Ü—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –ø–æ–∫—É–ø–∫–∏
@router.callback_query(F.data.startswith("buy_category_swipe:"))
async def user_buy_category_swipe(call: CallbackQuery, bot: Bot, state: FSM, arSession: ARS):
    remover = int(call.data.split(":")[1])

    await call.message.edit_text(
        "<b>üéÅ –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –≤–∞–º —Ç–æ–≤–∞—Ä:</b>",
        reply_markup=prod_item_category_swipe_fp(remover),
    )


# –û—Ç–∫—Ä—ã—Ç–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –ø–æ–∫—É–ø–∫–∏
@router.callback_query(F.data.startswith("buy_category_open:"))
async def user_buy_category_open(call: CallbackQuery, bot: Bot, state: FSM, arSession: ARS):
    category_id = call.data.split(":")[1]
    remover = int(call.data.split(":")[2])

    get_category = Categoryx.get(category_id=category_id)
    get_positions = get_positions_items(category_id)

    if len(get_positions) >= 1:
        await del_message(call.message)

        await call.message.answer(
            f"<b>üéÅ –¢–µ–∫—É—â–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: <code>{get_category.category_name}</code></b>",
            reply_markup=prod_item_position_swipe_fp(remover, category_id),
        )
    else:
        if remover == 0:
            await call.message.edit_text("<b>üéÅ –£–≤—ã, —Ç–æ–≤–∞—Ä—ã –≤ –¥–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.</b>")
            await call.answer("‚ùó –ü–æ–∑–∏—Ü–∏–∏ –±—ã–ª–∏ –∏–∑–º–µ–Ω–µ–Ω—ã –∏–ª–∏ —É–¥–∞–ª–µ–Ω—ã")
        else:
            await call.answer(
                f"‚ùï –¢–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {get_category.category_name} –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç",
                True,
                cache_time=5,
            )


# –°—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ–∑–∏—Ü–∏–π –¥–ª—è –ø–æ–∫—É–ø–∫–∏
@router.callback_query(F.data.startswith("buy_position_swipe:"))
async def user_buy_position_swipe(call: CallbackQuery, bot: Bot, state: FSM, arSession: ARS):
    category_id = call.data.split(":")[1]
    remover = int(call.data.split(":")[2])

    get_category = Categoryx.get(category_id=category_id)

    await del_message(call.message)
    await call.message.answer(
        f"<b>üéÅ –¢–µ–∫—É—â–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: <code>{get_category.category_name}</code></b>",
        reply_markup=prod_item_position_swipe_fp(remover, category_id),
    )


# –û—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –ø–æ–∫—É–ø–∫–∏
@router.callback_query(F.data.startswith("buy_position_open:"))
async def user_buy_position_open(call: CallbackQuery, bot: Bot, state: FSM, arSession: ARS):
    position_id = call.data.split(":")[1]
    remover = int(call.data.split(":")[2])

    await state.clear()

    await del_message(call.message)
    await position_open_user(bot, call.from_user.id, position_id, remover)


#################################### –ü–û–ö–£–ü–ö–ê ###################################
# –í—ã–±–æ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏
@router.callback_query(F.data.startswith("buy_item_open:"))
async def user_buy_open(call: CallbackQuery, bot: Bot, state: FSM, arSession: ARS):
    position_id = call.data.split(":")[1]
    remover = int(call.data.split(":")[2])

    get_position = Positionx.get(position_id=position_id)
    get_items = Itemx.gets(position_id=position_id)
    get_user = Userx.get(user_id=call.from_user.id)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –∏–º–µ–µ—Ç—Å—è –ª–∏ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤
    if int(get_user.user_balance) < int(get_position.position_price):
        return await call.answer("‚ùó –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å", True)

    if len(get_items) < 1:
        return await call.answer("‚ùó –¢–æ–≤–∞—Ä–æ–≤ –Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏", True)

    # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –∫ –ø–æ–∫—É–ø–∫–µ, –ø–æ–¥—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –ø–æ–¥ –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if get_position.position_price != 0:
        get_count = round(int(get_user.user_balance / get_position.position_price), 2)

        if get_count > len(get_items):
            get_items = len(get_items)
        else:
            get_items = get_count
    else:
        get_items = len(get_items)

    # –ï—Å–ª–∏ –≤ –Ω–∞–ª–∏—á–∏–∏ –≤—Å–µ–≥–æ –æ–¥–∏–Ω —Ç–æ–≤–∞—Ä, —Ç–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–æ–≤ –∫ –ø–æ–∫—É–ø–∫–µ
    if get_items == 1:
        await state.clear()

        await del_message(call.message)

        await call.message.answer(
            ded(f"""
                <b>üéÅ –í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å —Ç–æ–≤–∞—Ä(—ã)?</b>
                ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
                ‚ñ™Ô∏è –¢–æ–≤–∞—Ä: <code>{get_position.position_name}</code>
                ‚ñ™Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: <code>1—à—Ç</code>
                ‚ñ™Ô∏è –°—É–º–º–∞ –∫ –ø–æ–∫—É–ø–∫–µ: <code>{get_position.position_price}‚ÇΩ</code>
            """),
            reply_markup=products_confirm_finl(position_id, get_position.category_id, 1),
        )
    else:
        await state.update_data(here_buy_position_id=position_id)
        await state.set_state("here_item_count")

        await del_message(call.message)

        await call.message.answer(
            ded(f"""
                <b>üéÅ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏</b>
                ‚ùï –û—Ç <code>1</code> –¥–æ <code>{get_items}</code>
                ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
                ‚ñ™Ô∏è –¢–æ–≤–∞—Ä: <code>{get_position.position_name}</code> - <code>{get_position.position_price}‚ÇΩ</code>
                ‚ñ™Ô∏è –í–∞—à –±–∞–ª–∞–Ω—Å: <code>{get_user.user_balance}‚ÇΩ</code>
            """),
            reply_markup=products_return_finl(position_id, get_position.category_id),
        )


# –ü—Ä–∏–Ω—è—Ç–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏
@router.message(F.text, StateFilter("here_item_count"))
async def user_buy_count(message: Message, bot: Bot, state: FSM, arSession: ARS):
    position_id = (await state.get_data())['here_buy_position_id']

    get_position = Positionx.get(position_id=position_id)
    get_user = Userx.get(user_id=message.from_user.id)
    get_items = Itemx.gets(position_id=position_id)

    # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –∫ –ø–æ–∫—É–ø–∫–µ, –ø–æ–¥—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –ø–æ–¥ –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if get_position.position_price != 0:
        get_count = int(get_user.user_balance / get_position.position_price)

        if get_count > len(get_items):
            get_count = len(get_items)
    else:
        get_count = len(get_items)

    send_message = ded(f"""
        üéÅ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏
        ‚ùï –û—Ç <code>1</code> –¥–æ <code>{get_count}</code>
        ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
        ‚ñ™Ô∏è –¢–æ–≤–∞—Ä: <code>{get_position.position_name}</code> - <code>{get_position.position_price}‚ÇΩ</code>
        ‚ñ™Ô∏è –í–∞—à –±–∞–ª–∞–Ω—Å: <code>{get_user.user_balance}‚ÇΩ</code>
    """)

    # –ï—Å–ª–∏ –±—ã–ª–æ –≤–≤–µ–¥–µ–Ω–æ –Ω–µ —á–∏—Å–ª–æ
    if not message.text.isdigit():
        return await message.answer(
            f"<b>‚ùå –î–∞–Ω–Ω—ã–µ –±—ã–ª–∏ –≤–≤–µ–¥–µ–Ω—ã –Ω–µ–≤–µ—Ä–Ω–æ.</b>\n" + send_message,
            reply_markup=products_return_finl(position_id, get_position.category_id),
        )

    get_count = int(message.text)
    amount_pay = round(get_position.position_price * get_count, 2)

    # –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏
    if len(get_items) < 1:
        await state.clear()
        return await message.answer("<b>üéÅ –¢–æ–≤–∞—Ä –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–µ–ª–∏ –∫—É–ø–∏—Ç—å, –∑–∞–∫–æ–Ω—á–∏–ª—Å—è</b>")

    # –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä–æ–≤ –º–µ–Ω—å—à–µ 1 –∏–ª–∏ –º–µ–Ω—å—à–µ –Ω–∞–ª–∏—á–∏—è
    if get_count < 1 or get_count > len(get_items):
        return await message.answer(
            f"<b>‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤.</b>\n" + send_message,
            reply_markup=products_return_finl(position_id, get_position.category_id),
        )

    # –ï—Å–ª–∏ –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –º–µ–Ω—å—à–µ, —á–µ–º —Ü–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏
    if int(get_user.user_balance) < amount_pay:
        return await message.answer(
            f"<b>‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ —Å—á–µ—Ç–µ.</b>\n" + send_message,
            reply_markup=products_return_finl(position_id, get_position.category_id),
        )

    await state.clear()

    await message.answer(
        ded(f"""
            <b>üéÅ –í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å —Ç–æ–≤–∞—Ä(—ã)?</b>
            ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
            ‚ñ™Ô∏è –¢–æ–≤–∞—Ä: <code>{get_position.position_name}</code>
            ‚ñ™Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: <code>{get_count}—à—Ç</code>
            ‚ñ™Ô∏è –°—É–º–º–∞ –∫ –ø–æ–∫—É–ø–∫–µ: <code>{amount_pay}‚ÇΩ</code>
        """),
        reply_markup=products_confirm_finl(position_id, get_position.category_id, get_count),
    )


# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏ —Ç–æ–≤–∞—Ä–∞
@router.callback_query(F.data.startswith("buy_item_confirm:"))
async def user_buy_confirm(call: CallbackQuery, bot: Bot, state: FSM, arSession: ARS):
    position_id = int(call.data.split(":")[1])
    purchase_count = int(call.data.split(":")[2])

    get_items = Itemx.gets(position_id=position_id)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω—É–∂–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–æ–≤
    if purchase_count > len(get_items):
        return await call.message.edit_text(
            "<b>üéÅ –¢–æ–≤–∞—Ä –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–µ–ª–∏ –∫—É–ø–∏—Ç—å –∑–∞–∫–æ–Ω—á–∏–ª—Å—è –∏–ª–∏ –∏–∑–º–µ–Ω–∏–ª—Å—è.</b>",
        )

    await call.message.edit_text("<b>üîÑ –ñ–¥–∏—Ç–µ, —Ç–æ–≤–∞—Ä—ã –ø–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞—é—Ç—Å—è</b>")

    get_position = Positionx.get(position_id=position_id)
    get_category = Categoryx.get(category_id=get_position.category_id)
    get_user = Userx.get(user_id=call.from_user.id)

    purchase_price = round(get_position.position_price * purchase_count, 2)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ–±—â–µ–π —Å—É–º–º—ã –ø–æ–∫—É–ø–∫–∏
    if get_user.user_balance < purchase_price:
        return await call.message.answer("<b>‚ùó –ù–∞ –≤–∞—à–µ–º —Å—á—ë—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤</b>")

    save_items, save_len = Itemx.buy(get_items, purchase_count)
    save_count = len(save_items)

    # –ï—Å–ª–∏ –≤ –Ω–∞–ª–∏—á–∏–∏ –æ–∫–∞–∑–∞–ª–æ—Å—å –º–µ–Ω—å—à–µ —Ç–æ–≤–∞—Ä–æ–≤, —á–µ–º –±—ã–ª–æ –∑–∞–ø—Ä–æ—à–µ–Ω–æ
    if purchase_count != save_count:
        purchase_price = round(get_position.position_price * save_count, 2)
        purchase_count = save_count

    Userx.update(
        get_user.user_id,
        user_balance=round(get_user.user_balance - purchase_price, 2),
    )

    purchase_receipt = gen_id()
    purchase_unix = get_unix()
    purchase_data = "\n".join(save_items)

    Purchasesx.add(
        get_user.user_id,
        get_user.user_balance,
        round(get_user.user_balance - purchase_price, 2),
        purchase_receipt,
        purchase_data,
        purchase_count,
        purchase_price,
        get_position.position_price,
        get_position.position_id,
        get_position.position_name,
        get_category.category_id,
        get_category.category_name,
    )

    await del_message(call.message)

    for item in split_messages(save_items, save_len):
        await call.message.answer("\n\n".join(item), parse_mode="None")
        await asyncio.sleep(0.3)

    await call.message.answer(
        ded(f"""
            <b>‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª–∏ —Ç–æ–≤–∞—Ä(—ã)</b>
            ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
            ‚ñ™Ô∏è –ß–µ–∫: <code>#{purchase_receipt}</code>
            ‚ñ™Ô∏è –¢–æ–≤–∞—Ä: <code>{get_position.position_name} | {purchase_count}—à—Ç | {purchase_price}‚ÇΩ</code>
            ‚ñ™Ô∏è –î–∞—Ç–∞ –ø–æ–∫—É–ø–∫–∏: <code>{convert_date(purchase_unix)}</code>
        """),
        reply_markup=menu_frep(call.from_user.id),
    )
