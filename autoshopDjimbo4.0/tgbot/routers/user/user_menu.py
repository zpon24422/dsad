# - *- coding: utf- 8 - *-
import asyncio

from aiogram import Router, Bot, F
from aiogram.filters import Command
from aiogram.types import CallbackQuery, Message

from tgbot.data.config import BOT_VERSION, get_desc
from tgbot.database.db_purchases import Purchasesx
from tgbot.database.db_settings import Settingsx
from tgbot.keyboards.inline_user import user_support_finl
from tgbot.keyboards.inline_user_page import *
from tgbot.utils.const_functions import ded, del_message, convert_date
from tgbot.utils.misc.bot_models import FSM, ARS
from tgbot.utils.misc_functions import upload_text, insert_tags, get_items_available
from tgbot.utils.text_functions import open_profile_user

router = Router(name=__name__)


# –û—Ç–∫—Ä—ã—Ç–∏–µ —Ç–æ–≤–∞—Ä–æ–≤
@router.message(F.text == "üéÅ –ö—É–ø–∏—Ç—å")
async def user_shop(message: Message, bot: Bot, state: FSM, arSession: ARS):
    await state.clear()

    get_categories = Categoryx.get_all()

    if len(get_categories) >= 1:
        await message.answer(
            "<b>üéÅ –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –≤–∞–º —Ç–æ–≤–∞—Ä:</b>",
            reply_markup=prod_item_category_swipe_fp(0),
        )
    else:
        await message.answer("<b>üéÅ –£–≤—ã, —Ç–æ–≤–∞—Ä—ã –≤ –¥–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.</b>")


# –û—Ç–∫—Ä—ã—Ç–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
@router.message(F.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
async def user_profile(message: Message, bot: Bot, state: FSM, arSession: ARS):
    await state.clear()

    await open_profile_user(bot, message.from_user.id)


# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –Ω–∞–ª–∏—á–∏–∏
@router.message(F.text == "üßÆ –ù–∞–ª–∏—á–∏–µ —Ç–æ–≤–∞—Ä–æ–≤")
async def user_available(message: Message, bot: Bot, state: FSM, arSession: ARS):
    await state.clear()

    items_available = get_items_available()

    if len(items_available) >= 1:
        await message.answer(
            items_available[0],
            reply_markup=prod_available_swipe_fp(0, len(items_available)),
        )
    else:
        await message.answer("<b>üéÅ –£–≤—ã, —Ç–æ–≤–∞—Ä—ã –≤ –¥–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.</b>")

# –û—Ç–∫—Ä—ã—Ç–∏–µ FAQ
@router.message(F.text.in_(('‚ùî FAQ', '/faq')))
async def user_faq(message: Message, bot: Bot, state: FSM, arSession: ARS):
    await state.clear()

    get_settings = Settingsx.get()
    send_message = get_settings.misc_faq

    if send_message == "None":
        send_message = ded(f"""
            ‚ùî –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è. –ò–∑–º–µ–Ω–∏—Ç–µ –µ—ë –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –±–æ—Ç–∞.
            ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
            {get_desc()}
        """)

    await message.answer(
        insert_tags(message.from_user.id, send_message),
        disable_web_page_preview=True,
    )


# –û—Ç–∫—Ä—ã—Ç–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Å—Å—ã–ª–∫–æ–π –Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É
@router.message(F.text.in_(('‚òéÔ∏è –ü–æ–¥–¥–µ—Ä–∂–∫–∞', '/support')))
async def user_support(message: Message, bot: Bot, state: FSM, arSession: ARS):
    await state.clear()

    get_settings = Settingsx.get()

    if get_settings.misc_support == "None":
        return await message.answer(
            ded(f"""
                ‚òéÔ∏è –ü–æ–¥–¥–µ—Ä–∂–∫–∞. –ò–∑–º–µ–Ω–∏—Ç–µ –µ—ë –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –±–æ—Ç–∞.
                ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
                {get_desc()}
            """),
            disable_web_page_preview=True,
        )

    await message.answer(
        "<b>‚òéÔ∏è –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è —Å–≤—è–∑–∏ —Å –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.</b>",
        reply_markup=user_support_finl(get_settings.misc_support),
    )


# –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–∏ –±–æ—Ç–∞
@router.message(Command(commands=['version']))
async def admin_version(message: Message, bot: Bot, state: FSM, arSession: ARS):
    await state.clear()

    await message.answer(f"<b>‚ùáÔ∏è –¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è –±–æ—Ç–∞: <code>{BOT_VERSION}</code></b>")


# –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ
@router.message(Command(commands=['dj_desc']))
async def admin_desc(message: Message, bot: Bot, state: FSM, arSession: ARS):
    await state.clear()

    await message.answer(get_desc(), disable_web_page_preview=True)


################################################################################
# –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –∫ –ø—Ä–æ—Ñ–∏–ª—é
@router.callback_query(F.data == "user_profile")
async def user_profile_return(call: CallbackQuery, bot: Bot, state: FSM, arSession: ARS):
    await state.clear()

    await del_message(call.message)
    await open_profile_user(bot, call.from_user.id)


# –ü—Ä–æ—Å–º–æ—Ç—Ä –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∫—É–ø–æ–∫
@router.callback_query(F.data == "user_purchases")
async def user_purchases(call: CallbackQuery, bot: Bot, state: FSM, arSession: ARS):
    get_purchases = Purchasesx.gets(user_id=call.from_user.id)
    get_purchases = get_purchases[-5:]

    if len(get_purchases) >= 1:
        await call.answer("üéÅ –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –ø–æ–∫—É–ø–æ–∫")
        await del_message(call.message)

        for purchase in get_purchases:
            link_items = await upload_text(arSession, purchase.purchase_data)

            await call.message.answer(
                ded(f"""
                    <b>üßæ –ß–µ–∫: <code>#{purchase.purchase_receipt}</code></b>
                    ‚ñ™Ô∏è –¢–æ–≤–∞—Ä: <code>{purchase.purchase_position_name} | {purchase.purchase_count}—à—Ç | {purchase.purchase_price}‚ÇΩ</code>
                    ‚ñ™Ô∏è –î–∞—Ç–∞ –ø–æ–∫—É–ø–∫–∏: <code>{convert_date(purchase.purchase_unix)}</code>
                    ‚ñ™Ô∏è –¢–æ–≤–∞—Ä—ã: <a href='{link_items}'>–∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ</a>
                """)
            )

            await asyncio.sleep(0.2)

        await open_profile_user(bot, call.from_user.id)
    else:
        await call.answer("‚ùó –£ –≤–∞—Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–∫—É–ø–∫–∏", True)


# –°—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–∞–ª–∏—á–∏—è —Ç–æ–≤–∞—Ä–æ–≤
@router.callback_query(F.data.startswith("user_available_swipe:"))
async def user_available_swipe(call: CallbackQuery, bot: Bot, state: FSM, arSession: ARS):
    remover = int(call.data.split(":")[1])

    items_available = get_items_available()

    if remover >= len(items_available):
        remover = len(items_available) - 1
    if remover < 0:
        remover = 0

    await call.message.edit_text(
        items_available[remover],
        reply_markup=prod_available_swipe_fp(remover, len(items_available)),
    )
