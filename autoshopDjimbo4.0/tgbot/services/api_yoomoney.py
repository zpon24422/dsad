# - *- coding: utf- 8 - *-
import json
from typing import Union

from aiogram import Bot
from aiogram.types import CallbackQuery, Message
from aiohttp import ClientConnectorCertificateError

from tgbot.database.db_payments import Paymentsx
from tgbot.utils.const_functions import ded, gen_id, send_errors
from tgbot.utils.misc.bot_models import ARS
from tgbot.utils.misc_functions import send_admins


class YoomoneyAPI:
    def __init__(
            self,
            bot: Bot,
            arSession: ARS,
            update: Union[Message, CallbackQuery] = None,
            token: str = None,
            skipping_error: bool = False,
    ):
        if token is not None:
            self.token = token
        else:
            get_payment = Paymentsx.get()

            self.token = get_payment.yoomoney_token

        self.base_url = 'https://yoomoney.ru/api/'
        self.headers = {
            'Authorization': f'Bearer {self.token}',
            'Content-Type': 'application/x-www-form-urlencoded',
        }

        self.bot = bot
        self.arSession = arSession
        self.update = update
        self.token = token
        self.skipping_error = skipping_error

    # –†–∞—Å—Å—ã–ª–∫–∞ –∞–¥–º–∏–Ω–∞–º –æ –Ω–µ—Ä–∞–±–æ—á–µ–º –∫–æ—à–µ–ª—å–∫–µ
    async def error_wallet_admin(self, error_code: str = "Unknown"):
        if not self.skipping_error:
            await send_admins(
                self.bot,
                f"<b>üîÆ –ÆMoney –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ö–∞–∫ –º–æ–∂–Ω–æ –±—ã—Å—Ç—Ä–µ–µ –µ–≥–æ –∑–∞–º–µ–Ω–∏—Ç–µ</b>\n"
                f"‚ùóÔ∏è Error: <code>{error_code}</code>"
            )

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –æ –Ω–µ–ø–æ–ª–∞–¥–∫–∞—Ö —Å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ–º
    async def error_wallet_user(self):
        if self.update is not None and not self.skipping_error:
            if isinstance(self.update, Message):
                await self.update.edit_text(
                    "<b>‚ùó –ò–∑–≤–∏–Ω—è–µ–º—Å—è –∑–∞ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞, –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.\n"
                    "‚åõ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á—É—Ç—å –ø–æ–∑–∂–µ.</b>"
                )
            elif isinstance(self.update, CallbackQuery):
                await self.update.answer(
                    "‚ùó –ò–∑–≤–∏–Ω—è–µ–º—Å—è –∑–∞ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞, –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.\n"
                    "‚åõ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á—É—Ç—å –ø–æ–∑–∂–µ."
                )
            else:
                await send_errors(self.bot, 4938221)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—à–µ–ª—å–∫–∞
    async def check(self) -> str:
        status, response = await self._request("account-info")

        if status:
            if len(response) >= 1:
                if response['identified']:
                    text_identified = "–ü—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
                else:
                    text_identified = "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"

                if response['account_status'] == "identified":
                    text_status = "–ò–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å—á–µ—Ç"
                elif response['account_status'] == "anonymous":
                    text_status = "–ê–Ω–æ–Ω–∏–º–Ω—ã–π —Å—á–µ—Ç"
                elif response['account_status'] == "named":
                    text_status = "–ò–º–µ–Ω–Ω–æ–π —Å—á–µ—Ç"
                else:
                    text_status = response['account_status']

                if response['account_type'] == "personal":
                    text_type = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Å—á–µ—Ç"
                elif response['account_type'] == "professional":
                    text_type = "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å—á–µ—Ç"
                else:
                    text_type = response['account_type']

                return ded(f"""
                    <b>üîÆ –ÆMoney –∫–æ—à–µ–ª—ë–∫ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç ‚úÖ</b>
                    ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
                    ‚ñ™Ô∏è –ö–æ—à–µ–ª—ë–∫: <code>{response['account']}</code>
                    ‚ñ™Ô∏è –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è: <code>{text_identified}</code>
                    ‚ñ™Ô∏è –°—Ç–∞—Ç—É—Å –∞–∫–∫–∞—É–Ω—Ç–∞: <code>{text_status}</code>
                    ‚ñ™Ô∏è –¢–∏–ø —Å—á–µ—Ç–∞: <code>{text_type}</code>
                """)
            else:
                return "<b>üîÆ –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ÆMoney –∫–æ—à–µ–ª—ë–∫ ‚ùå</b>"
        else:
            return "<b>üîÆ –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ÆMoney –∫–æ—à–µ–ª—ë–∫ ‚ùå</b>"

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
    async def balance(self) -> str:
        status, response = await self._request("account-info")

        if status:
            wallet_balance = response['balance']
            wallet_number = await self.account_info()

            return ded(f"""
                <b>üîÆ –ë–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞ –ÆMoney</b>
                ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
                ‚ñ™Ô∏è –ö–æ—à–µ–ª—ë–∫: <code>{wallet_number}</code>
                ‚ñ™Ô∏è –ë–∞–ª–∞–Ω—Å: <code>{wallet_balance}‚ÇΩ</code>
            """)
        else:
            return "<b>üîÆ –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å –ÆMoney –∫–æ—à–µ–ª—å–∫–∞ ‚ùå</b>"

    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ
    async def account_info(self):
        status, response = await self._request("account-info")

        return response['account']

    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    async def authorization_get(self) -> str:
        session = await self.arSession.get_session()

        headers = {
            'Content-Type': 'application/x-www-form-urlencoded'
        }

        url = f"https://yoomoney.ru/oauth/authorize?client_id=DC7FFCDA285C720D958E6EB6FB4910335C186CB6C8539A1686B5E109128562AB&response_type=code&redirect_uri=https://yoomoney.ru&scope=account-info%20operation-history%20operation-details"

        response = await session.post(url, headers=headers)

        return str(response.url)

    # –ü—Ä–∏–Ω—è—Ç–∏–µ –∫–æ–¥–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
    async def authorization_enter(self, get_code: str) -> tuple[bool, str, str]:
        session = await self.arSession.get_session()

        headers = {
            'Content-Type': 'application/x-www-form-urlencoded'
        }

        url = f"https://yoomoney.ru/oauth/token?code={get_code}&client_id=DC7FFCDA285C720D958E6EB6FB4910335C186CB6C8539A1686B5E109128562AB&grant_type=authorization_code&redirect_uri=https://yoomoney.ru"

        response = await session.post(url, headers=headers)
        response_data = json.loads((await response.read()).decode())

        if "error" in response_data:
            error = response_data['error']

            if error == "invalid_request":
                return False, "", "<b>‚ùå –¢—Ä–µ–±—É–µ–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∏–ª–∏ –∏–º–µ—é—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∏–ª–∏ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è</b>"
            elif error == "unauthorized_client":
                return False, "", ded(f"""
                    <b>‚ùå –ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ 'client_id' –∏–ª–∏ 'client_secret', –∏–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
                    –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞ –∑–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ÆMoney –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –µ–≥–æ 'client_id')</b>
                """)
            elif error == "invalid_grant":
                return False, "", ded(f"""
                    <b>‚ùå –í –≤—ã–ø—É—Å–∫–µ 'access_token' –æ—Ç–∫–∞–∑–∞–Ω–æ. –ÆMoney –Ω–µ –≤—ã–ø—É—Å–∫–∞–ª –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω,
                    —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Ç–æ–∫–µ–Ω–∞ –∏—Å—Ç–µ–∫, –∏–ª–∏ —ç—Ç–æ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω —É–∂–µ –≤—ã–¥–∞–Ω
                    'access_token' (–ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å —Ç–µ–º –∂–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º)</b>
                """)

        if response_data['access_token'] == "":
            return False, "", "<b>‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—Å—ë —Å–Ω–æ–≤–∞.</b>"

        return True, response_data['access_token'], "<b>üîÆ –ÆMoney –∫–æ—à–µ–ª—ë–∫ –±—ã–ª —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω ‚úÖ</b>"

    # –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞
    async def bill(self, pay_amount: Union[float, int]) -> tuple[str, str, int]:
        session = await self.arSession.get_session()

        bill_receipt = gen_id()

        get_wallet = await self.account_info()
        url = "https://yoomoney.ru/quickpay/confirm.xml?"

        pay_amount_bill = pay_amount + (pay_amount * 0.031)

        if float(pay_amount_bill) < 2:
            pay_amount_bill = 2.04

        payload = {
            'receiver': get_wallet,
            'quickpay_form': "button",
            'targets': '–î–æ–±—Ä–æ–≤–æ–ª—å–Ω–æ–µ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–µ',
            'paymentType': 'SB',
            'sum': pay_amount_bill,
            'label': bill_receipt,
        }

        for value in payload:
            url += str(value).replace("_", "-") + "=" + str(payload[value])
            url += "&"

        bill_link = str((await session.post(url[:-1].replace(" ", "%20"))).url)

        bill_message = ded(f"""
            <b>üí∞ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞</b>
            ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
            ‚ñ™Ô∏è –î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ 
            <code>–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ</code> –∏ –æ–ø–ª–∞—Ç–∏—Ç–µ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π –≤–∞–º —Å—á—ë—Ç
            ‚ñ™Ô∏è –£ –≤–∞—Å –∏–º–µ–µ—Ç—Å—è 60 –º–∏–Ω—É—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É —Å—á–µ—Ç–∞.
            ‚ñ™Ô∏è –°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: <code>{pay_amount}‚ÇΩ</code>
            ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
            ‚ùóÔ∏è –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ <code>–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É</code>
        """)

        return bill_message, bill_link, bill_receipt

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–∞
    async def bill_check(self, receipt: Union[str, int] = None, records: int = 1) -> tuple[int, float]:
        data = {
            'type': 'deposition',
            'details': 'true',
        }

        if receipt is not None:
            data['label'] = receipt
        if records is not None:
            data['records'] = records

        status, response = await self._request("operation-history", data)

        pay_status = 1
        pay_amount = None
        pay_currency = None

        if status:
            pay_status = 2

            if len(response['operations']) >= 1:
                pay_currency = response['operations'][0]['amount_currency']
                pay_amount = response['operations'][0]['amount']

                pay_status = 3

                if pay_currency == "RUB":
                    pay_status = 0

        return pay_status, pay_amount

    # –ó–∞–ø—Ä–æ—Å
    async def _request(
            self,
            method: str,
            data: dict = None,
    ) -> tuple[bool, any]:
        session = await self.arSession.get_session()

        url = self.base_url + method

        try:
            response = await session.post(url, headers=self.headers, data=data)
            response_data = json.loads((await response.read()).decode())

            if response.status == 200:
                return True, response_data
            else:
                await self.error_wallet_user()
                await self.error_wallet_admin(f"{response.status} - {str(response_data)}")

                return False, response_data
        except ClientConnectorCertificateError:
            await self.error_wallet_user()
            await self.error_wallet_admin("CERTIFICATE_VERIFY_FAILED")

            return False, "CERTIFICATE_VERIFY_FAILED"
        except Exception as ex:
            await self.error_wallet_user()
            await self.error_wallet_admin(str(ex))

            return False, str(ex)
