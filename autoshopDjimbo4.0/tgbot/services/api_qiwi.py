# - *- coding: utf- 8 - *-
import json
from typing import Union

from aiogram import Bot
from aiogram.types import Message, CallbackQuery
from aiohttp import ClientConnectorCertificateError

from tgbot.database.db_payments import Paymentsx
from tgbot.utils.const_functions import ded, send_errors, gen_id
from tgbot.utils.misc.bot_models import ARS
from tgbot.utils.misc_functions import send_admins


# –ê–ø–∏ —Ä–∞–±–æ—Ç—ã —Å QIWI
class QiwiAPI:
    def __init__(
            self,
            bot: Bot,
            arSession: ARS,
            update: Union[Message, CallbackQuery] = None,
            login: str = None,
            token: str = None,
            skipping_error: bool = False,
    ):
        if login is not None:
            self.login = login
            self.token = token
        else:
            get_payment = Paymentsx.get()

            self.login = get_payment.qiwi_login
            self.token = get_payment.qiwi_token

        self.headers = {
            'authorization': f'Bearer {self.token}',
        }

        self.bot = bot
        self.arSession = arSession
        self.update = update
        self.skipping_error = skipping_error

    # –†–∞—Å—Å—ã–ª–∫–∞ –∞–¥–º–∏–Ω–∞–º –æ –Ω–µ—Ä–∞–±–æ—á–µ–º –∫–æ—à–µ–ª—å–∫–µ
    async def error_wallet_admin(self, error_code: str = "Unknown"):
        if not self.skipping_error:
            await send_admins(
                self.bot,
                f"<b>ü•ù QIWI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ö–∞–∫ –º–æ–∂–Ω–æ –±—ã—Å—Ç—Ä–µ–µ –µ–≥–æ –∑–∞–º–µ–Ω–∏—Ç–µ</b>\n"
                f"‚ùóÔ∏è Error: <code>{error_code}</code>"
            )

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –æ –Ω–µ–ø–æ–ª–∞–¥–∫–∞—Ö —Å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ–º
    async def error_wallet_user(self):
        if self.update is not None and not self.skipping_error:
            if isinstance(self.update, Message):
                await self.update.edit_text(
                    "<b>‚ùó –ò–∑–≤–∏–Ω—è–µ–º—Å—è –∑–∞ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞, –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.\n"
                    "‚åõ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á—É—Ç—å –ø–æ–∑–∂–µ.</b>"
                )
            elif isinstance(self.update, CallbackQuery):
                await self.update.answer(
                    "‚ùó –ò–∑–≤–∏–Ω—è–µ–º—Å—è –∑–∞ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞, –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.\n"
                    "‚åõ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á—É—Ç—å –ø–æ–∑–∂–µ."
                )
            else:
                await send_errors(self.bot, 4934355)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
    async def balance(self) -> str:
        url = f"https://edge.qiwi.com/funding-sources/v2/persons/{self.login}/accounts"

        status, response, code = await self._request("GET", url)

        if status:
            save_balance = []

            for balance in response['accounts']:
                if "qw_wallet_usd" == balance['alias']:
                    save_balance.append(f"üá∫üá∏ –ë–∞–ª–∞–Ω—Å –≤ –î–æ–ª–ª–∞—Ä–∞—Ö: <code>{balance['balance']['amount']}$</code>")

                if "qw_wallet_rub" == balance['alias']:
                    save_balance.append(f"üá∑üá∫ –ë–∞–ª–∞–Ω—Å –≤ –†—É–±–ª—è—Ö: <code>{balance['balance']['amount']}‚ÇΩ</code>")

                if "qw_wallet_eur" == balance['alias']:
                    save_balance.append(f"üá™üá∫ –ë–∞–ª–∞–Ω—Å –≤ –ï–≤—Ä–æ: <code>{balance['balance']['amount']}‚Ç¨</code>")

                if "qw_wallet_kzt" == balance['alias']:
                    save_balance.append(f"üá∞üáø –ë–∞–ª–∞–Ω—Å –≤ –¢–µ–Ω–≥–µ: <code>{balance['balance']['amount']}‚Ç∏</code>")

            save_balance = "\n".join(save_balance)

            return ded(f"""
                <b>ü•ù –ë–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞ QIWI</b>
                ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
                ‚ñ™Ô∏è –ö–æ—à–µ–ª—ë–∫: <code>{self.login}</code>
                {save_balance}
            """)
        else:
            return ded(f"""
                <b>ü•ù –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å QIWI –∫–æ—à–µ–ª—å–∫–∞ ‚ùå</b>
                ‚ùóÔ∏è Error 4377125: <code>{response}</code>
            """)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ —É –∞–∫–∫–∞—É–Ω—Ç–∞
    async def check_limits(self) -> bool:
        url = f"https://edge.qiwi.com/person-profile/v1/persons/{self.login}/status/restrictions"

        status, response, code, = await self._request("GET", url)

        if response is not None and len(response) == 0:
            return False
        else:
            return True

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—à–µ–ª—å–∫–∞
    async def check(self) -> tuple[bool, str]:
        url = "https://edge.qiwi.com/person-profile/v1/profile/current"

        status, response, code = await self._request("GET", url)

        if status:
            status_limit = await self.check_limits()

            # –ù–∞–ª–∏—á–∏–µ –ª–∏–º–∏—Ç–æ–≤
            if status_limit:
                text_limit = "–ü—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç"
            else:
                text_limit = "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç"

            # –£—Ä–æ–≤–µ–Ω—å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
            for account in response['contractInfo']['identificationInfo']:
                if account['bankAlias'] == "QIWI":
                    if account['identificationLevel'] == "ANONYMOUS":
                        text_identification = "–ë–µ–∑ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"
                    elif account['identificationLevel'] == "SIMPLE":
                        text_identification = "–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è"
                    elif account['identificationLevel'] == "VERIFIED":
                        text_identification = "–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è"
                    elif account['identificationLevel'] == "FULL":
                        text_identification = "–ü–æ–ª–Ω–∞—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"
                    else:
                        text_identification = account['identificationLevel']

            # –°–ú–° –æ–ø–æ–≤–µ—â–µ–Ω–∏—è
            if response['contractInfo']['smsNotification']['enabled']:
                text_notification = "–í–∫–ª—é—á–µ–Ω—ã"
            else:
                text_notification = "–û—Ç–∫–ª—é—á–µ–Ω—ã"

            return True, ded(f"""
                <b>ü•ù QIWI –∫–æ—à–µ–ª—ë–∫ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç ‚úÖ</b>
                ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
                ‚ñ™Ô∏è –ö–æ—à–µ–ª—ë–∫: <code>{self.login}</code>
                ‚ñ™Ô∏è –¢–æ–∫–µ–Ω: <code>{self.token}</code>
                ‚ñ™Ô∏è –õ–∏–º–∏—Ç—ã: <code>{text_limit}</code>
                ‚ñ™Ô∏è –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è: <code>{text_identification}</code>
                ‚ñ™Ô∏è –°–ú–° –æ–ø–æ–≤–µ—â–µ–Ω–∏—è: <code>{text_notification}</code>
                ‚ñ™Ô∏è –ü–æ—á—Ç–∞: <code>{response['authInfo']['boundEmail']}</code>
                ‚ñ™Ô∏è –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞: <code>{response['authInfo']['registrationDate']}</code>
            """)
        else:
            if code == 400:
                return_message = "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É–∫–∞–∑–∞–Ω –≤ –Ω–µ–≤–µ—Ä–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ"
            elif code == 401:
                return_message = "–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω –∏–ª–∏ –∏—Å—Ç–µ–∫ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Ç–æ–∫–µ–Ω–∞ API"
            elif code == 403:
                return_message = "–ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –¥–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å (–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π —É —Ç–æ–∫–µ–Ω–∞ API)"
            elif code == "CERTIFICATE_VERIFY_FAILED":
                return_message = ded(f"""
                    CERTIFICATE_VERIFY_FAILED certificate verify failed: self signed certificate in certificate chain
                    –í–∞—à —Å–µ—Ä–≤–µ—Ä/–¥–µ–¥–∏–∫/—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –±–ª–æ–∫–∏—Ä—É—é—Ç –∑–∞–ø—Ä–æ—Å—ã –∫ QIWI. –û—Ç–∫–ª—é—á–∏—Ç–µ –∞–Ω—Ç–∏–≤–∏—Ä—É—Å –∏–ª–∏ –¥—Ä—É–≥–∏–µ –±–ª–æ–∫–∏—Ä—É—é—â–∏–µ –ü–û.
                """)
            else:
                return_message = code

        return_message = ded(f"""
            <b>ü•ù QIWI –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø—Ä–æ—à–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É ‚ùå</b>
            ‚ñ∂Ô∏è –ö–æ–¥ –æ—à–∏–±–∫–∏: <code>{return_message}</code>
        """)

        return False, return_message

    # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞
    async def edit(self) -> tuple[bool, str]:
        status, response = await self.check()

        if status:
            status_limit = await self.check_limits()

            if status_limit:
                text_limit = "‚ùóÔ∏è –ù–∞ –∞–∫–∫–∞—É–Ω—Ç–µ –∏–º–µ—é—Ç—Å—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è"
            else:
                text_limit = "‚ùïÔ∏è –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –∏–º–µ–µ—Ç –Ω–∏–∫–∞–∫–∏—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π"

            return True, ded(f"""
                <b>ü•ù QIWI –∫–æ—à–µ–ª—ë–∫ –±—ã–ª —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω ‚úÖ</b>
                {text_limit}
            """)
        else:
            return False, ""

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–ª–∞—Ç–µ–∂–∞
    async def bill(self, pay_amount: float) -> tuple[str, str, int]:
        bill_receipt = gen_id()

        bill_url = f"https://qiwi.com/payment/form/99?extra%5B%27account%27%5D={self.login}&amountInteger={pay_amount}&amountFraction=0&extra%5B%27comment%27%5D={bill_receipt}&currency=643&blocked%5B0%5D=sum&blocked%5B1%5D=comment&blocked%5B2%5D=account"

        bill_message = ded(f"""
            <b>üí∞ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞</b>
            ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
            ‚ñ™Ô∏è –î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ 
            <code>–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ</code> –∏ –æ–ø–ª–∞—Ç–∏—Ç–µ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π –≤–∞–º —Å—á—ë—Ç
            ‚ñ™Ô∏è QIWI –∫–æ—à–µ–ª—ë–∫: <code>{self.login}</code>
            ‚ñ™Ô∏è –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: <code>{bill_receipt}</code>
            ‚ñ™Ô∏è –°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: <code>{pay_amount}‚ÇΩ</code>
            ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
            ‚ùóÔ∏è –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ <code>–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É</code>
        """)

        return bill_message, bill_url, bill_receipt

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–∞
    async def bill_check(self, receipt: Union[str, int]) -> tuple[int, float]:
        url = f"https://edge.qiwi.com/payment-history/v2/persons/{self.login[1:]}/payments"

        parameters = {
            'rows': 50,
        }

        status, response, code = await self._request("GET", url, parameters)

        pay_status = 1
        pay_amount = 0

        if status:
            pay_status = 2

            for check_pay in response['data']:
                if str(receipt) == str(check_pay['comment']):
                    if "643" == str(check_pay['sum']['currency']):
                        pay_amount = int(float(check_pay['sum']['amount']))
                        pay_status = 0
                    else:
                        pay_status = 3

                    break

        return pay_status, pay_amount

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞
    async def _request(
            self,
            method: str,
            url: str,
            params: dict = None,
    ) -> tuple[bool, any, int]:
        session = await self.arSession.get_session()

        try:
            response = await session.get(url, params=params, headers=self.headers, ssl=False)
            response_data = json.loads((await response.read()).decode())

            if response.status == 200:
                return True, response_data, 200
            else:
                await self.error_wallet_user()
                await self.error_wallet_admin(f"{response.status} - {str(response_data)}")

                return False, response_data, response.status
        except ClientConnectorCertificateError:
            await self.error_wallet_user()
            await self.error_wallet_admin("CERTIFICATE_VERIFY_FAILED")

            return False, "CERTIFICATE_VERIFY_FAILED", response.status
        except Exception as ex:
            await self.error_wallet_user()
            await self.error_wallet_admin(str(ex))

            return False, str(ex), response.status
